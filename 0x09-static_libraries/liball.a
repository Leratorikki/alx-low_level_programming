!<arch>
0-isupper.c/    0           0     0     644     272       `
#include "main.h"
#include <stdio.h>
/**
 *_isupper - function that checks for uppercase character.
 *@c: char to c
 * Return: Returns 1 if c is uppercase
 * else Returns 0 otherwise
 */
int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}
0-memset.c/     0           0     0     644     396       `
#include "main.h"
#include <stdio.h>
/**
 * _memset - Fills memory with constant byte.
 * @s: A pointer to memory area to be filled.
 * @b: The constant byte value to fill the memory with.
 * @n: The number of bytes to fill.
 *
 * Return: A pointer to the memory areas s.
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int d;

	for (d = 0; d < n; d++)
		s[d] = b;

	return (s);
}
0-strcat.c/     0           0     0     644     492       `
#include "main.h"

/**
 * _strcat - A function that concatenates two strings.
 * @dest: The resulting string.
 * @src: The source string.
 * Return: A pointer to the resulting string dest.
 */

char *_strcat(char *dest, char *src)
{
	char *p = dest;

	/* Move the pointer to the end of the resulting string */
	while (*p)
		p++;

	/* Append the characters src to dest */
	while (*src)
	{
		*p = *src;
		src++;
		p++;
	}

	/* Add a null terminator at the end */
	*p = '\0';

	return (dest);
}
100-atoi.c/     0           0     0     644     594       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}
1-isdigit.c/    0           0     0     644     256       `
#include "main.h"
#include <stdio.h>
/**
 * _isdigit - check if a character is a digit
 * @c:the character to be checked.
 *
 * Return:1 if @c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
		return (1);
	else
		return (0);
}
1-memcpy.c/     0           0     0     644     364       `
#include "main.h"

/**
 * _memcpy - copied memory area
 * @dest: A pointer to memory area to be copied
 * @src: Copied memory byte
 * @n: The number to the bytes to be copied
 *
 * Return: A pointer to the memory area @dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int d;

	for (d = 0; d < n; d++)
		dest[d] = src[d];
	return (dest);
}
1-strncat.c/    0           0     0     644     666       `
#include "main.h"

/**
 * _strncat - A function that concatenates two strings,
 * using at most n bytes from src.
 * @dest: The resulting string.
 * @src: The source string.
 * @n: The maximum number of bytes from src to be appended.
 * Return: A pointer to the resulting string dest.
 */

char *_strncat(char *dest, char *src, int n)
{
	char *p_dest = dest;
	char *p_src = src;

	/* Move the resulting pointer to the end of dest */
	while (*p_dest)
		p_dest++;

	/* Copy at most n bytes from src to dest */
	while (*p_src && n > 0)
	{
		*p_dest = *p_src;
		p_dest++;
		p_src++;
		n--;
	}

	/* Add a null terminator at the end */
	*p_dest = '\0';

	return (dest);
}
2-strchr.c/     0           0     0     644     346       `
#include "main.h"

/**
 * _strchr - Locates a character in a string
 * @s: Pointer to the string
 * @c: Character to be located
 *
 * Return: Pointer to the first occurrence of c in s, or NULL if not found
 */
char *_strchr(char *s, char c)
{
	int b;

	for (b = 0; s[b] >= '\0'; b++)
	{
		if (s[b] == c)
			return (s + b);
	}

		return ('\0');
}
2-strlen.c/     0           0     0     644     244       `
#include "main.h"
/**
 * _strlen - Returns the length of a string
 * @s: pointer to the string
 *
 * Return: the length of the string
 */
int _strlen(char *s)
{
	int length = 0;

	while (*s != '\0')
	{
		length++;
		s++;
	}
	return (length);
}
2-strncpy.c/    0           0     0     644     599       `
#include "main.h"

/**
 * _strncpy - Copies up to n bytes of the src string to dest.
 * @dest: The resulting string.
 * @src: The source string.
 * @n: The maximum number of bytes to copy from src.
 * Return: A pointer to the resulting string dest.
 */

char *_strncpy(char *dest, char *src, int n)
{
	char *p_dest = dest;
	char *p_src = src;

	/* Copy up to n bytes from src to dest */
	while (*p_src && n > 0)
	{
		*p_dest = *p_src;
		p_dest++;
		p_src++;
		n--;
	}

	/* Fill any remaining space with null characters */
	while (n > 0)
	{
		*p_dest = '\0';
		p_dest++;
		n--;
	}

	return (dest);
}

3-islower.c/    0           0     0     644     228       `
#include "main.h"
/**
 * _islower - check if char is lower
 * @c: is the cha to be checked
 * Return: 1 if char is lowercase, otherwise 0.
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
		return (1);
	else
		return (0);
}
3-puts.c/       0           0     0     644     225       `
#include "main.h"
/**
 * _puts - Prints a string followed by a new line.
 * @str: Pointer to the string.
 */
void _puts(char *str)
{
	int i = 0;

	for (i = 0; str[i] != '\0'; i++)
	{
		_putchar(str[i]);
	}
	_putchar('\n');
}

3-strcmp.c/     0           0     0     644     375       `
#include "main.h"

/**
 * _strcmp - Compares two strings.
 * @s1: The first string.
 * @s2: The second string.
 * Return: An integer less than, equal to, or greater than zero
 * if s1 is found, respectively, to be less than, to match,
 * or be greater than s2.
 */

int _strcmp(char *s1, char *s2)
{
	while (*s1 && (*s1 == *s2))
	{
		s1++;
		s2++;
	}

	return (*s1 - *s2);
}

3-strspn.c/     0           0     0     644     530       `
#include "main.h"

/**
 *_strspn - Gets the length of a prefix substring
 * @s: Pointer to the string to search
 * @accept: Pointer to the string containing acceptable bytes
 *
 * Return: Number of bytes in the initial segment of s
 * consisting only of bytes from accept
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int a = 0;
	int b, i;

	while (*s)
	{
		b = 0;
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
			{
				a++;
				b = 1;
				break;
			}
		}

		if (!b)
			break;

		s++;
	}

	return (a);
}
4-isalpha.c/    0           0     0     644     234       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 * @c: the character to be checked
 * Return: 1 if c is a letter, 0 otherwise
 */
int _isalpha(int c)
{
	return ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'));
}
4-strpbrk.c/    0           0     0     644     446       `
#include "main.h"

/**
 * _strpbrk - Searches a string for any of a set of bytes
 * @s: Pointer to the string to search
 * @accept: Pointer to the bytes to search for
 *
 * Return: Pointer to the byte in s that matches one of the bytes in accept,
 * or NULL if not found
 */
char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
		{
			if (*s == accept[i])
				return (s);
		}
		s++;
	}

	return ('\0');
}
5-strstr.c/     0           0     0     644     490       `
#include "main.h"

/**
 *_strstr - Locates a substring in a string
 * @haystack: Pointer to the string to search
 * @needle: Pointer to the substring to find
 *
 * Return: Pointer to the beginning of the located substring,
 * or NULL if not found
 */
char *_strstr(char *haystack, char *needle)
{
	while (*haystack)
	{
		char *h = haystack;
		char *n = needle;

		while (*n && *h == *n)
		{
			h++;
			n++;
		}

		if (*n == '\0')
			return (haystack);

		haystack++;
	}

		return ('\0');
}
6-abs.c/        0           0     0     644     206       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer
 * @n: the int to check
 * Return: the absolute value of int
 */
int _abs(int n)
{
	if (n >= 0)
	{
		return (n);
	}
	return (-n);
}
9-strcpy.c/     0           0     0     644     475       `
#include "main.h"

/**
 * *_strcpy - copies the string pointed to by src
 * including the terminating null byte (\0)
 * to the buffer pointed to by dest
 * @dest: pointer to the buffer in which we copy the string
 * @src: string to be copied
 *
 * Return: the pointer to dest
 */
char *_strcpy(char *dest, char *src)
{
	int len, i;

	len = 0;

	while (src[len] != '\0')
	{
		len++;
	}

	for (i = 0; i < len; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';

	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

